# docker-compose.yml
# Purpose: Ensure frontend dependencies are always in-sync at container start, auto-install missing modules
#          (e.g., lucide-react), and preserve hot reloading. Also maintains backend venv and shared logs.
# Imports From: ./backend/Dockerfile, ./frontend/Dockerfile
# Exported To: The Docker daemon and local ./logs + ./backend/.venv for persistence.
services:
  # Ensure host ./logs is owned by ${UID:-1000}:${GID:-1000} before others start.
  log-perms:
    image: alpine:3.20
    user: "0:0"
    working_dir: /logs
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -eu
        mkdir -p /logs
        if [ -f /logs ]; then
          echo "Error: /logs exists as a file; expected a directory" >&2
          exit 1
        fi
        chown -R ${UID:-1000}:${GID:-1000} /logs
        chmod -R u+rwX,g+rwX /logs
        echo "log-perms: fixed ownership to UID=${UID:-1000} GID=${GID:-1000}"
    volumes:
      - ./logs:/logs

  # Ensure host ./backend/.venv exists and is owned correctly so uv can write to it.
  venv-perms:
    image: alpine:3.20
    user: "0:0"
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -eu
        mkdir -p /venv
        chown -R ${UID:-1000}:${GID:-1000} /venv
        chmod -R u+rwX,g+rwX /venv
        echo "venv-perms: fixed ownership of /venv"
    volumes:
      - ./backend/.venv:/venv

  backend:
    user: "${UID:-1000}:${GID:-1000}"
    build:
      context: ./backend
    depends_on:
      log-perms:
        condition: service_completed_successfully
      venv-perms:
        condition: service_completed_successfully
    environment:
      - HOME=/tmp
      - UV_CACHE_DIR=/tmp/uv-cache
      - PIP_CACHE_DIR=/tmp/pip-cache
      - LOG_DIR=/logs
    ports:
      - "${HOST_BACKEND_PORT:-8000}:8000"
    volumes:
      # App source and lockfiles (hot reload + lock sync)
      - ./backend/app:/app/app
      - ./backend/pyproject.toml:/app/pyproject.toml
      - ./backend/uv.lock:/app/uv.lock
      # Persist the virtualenv so runtime-installed deps survive container recreation
      - ./backend/.venv:/app/.venv
      # Shared logs directory
      - ./logs:/logs
    # Make venv/sync best-effort so the server still starts, then run uvicorn.
    command: >
      sh -lc "
        uv venv >/dev/null 2>&1 || true &&
        uv sync --frozen || uv sync || true &&
        exec uv run uvicorn app.bootstrap:asgi --host 0.0.0.0 --port 8000 --reload --log-config /app/uvicorn-log.json
      "

  frontend:
    build:
      context: ./frontend
    depends_on:
      log-perms:
        condition: service_completed_successfully
      backend:
        condition: service_started
    # Preflight step:
    # - Pin pnpm store/virtual store (must match Dockerfile/.npmrc).
    # - Reinstall if node_modules is missing OR metadata is stale vs lockfile/package.json.
    # - Auto-install lucide-react if require.resolve fails (covers IDE-driven installs & cold starts).
    # - Drop privileges for the dev server via su-exec.
    command: >
      sh -lc "
        set -eu
        mkdir -p /app/node_modules
        chown -R ${UID:-1000}:${GID:-1000} /app/node_modules

        pnpm config set store-dir /pnpm/store --location project >/dev/null 2>&1 || true
        pnpm config set virtual-store-dir node_modules/.pnpm --location project >/dev/null 2>&1 || true

        MODS=/app/node_modules/.pnpm/.modules.yaml
        NEED_REINSTALL=0
        [ ! -d /app/node_modules/.pnpm ] && NEED_REINSTALL=1
        [ ! -f \"$MODS\" ] && NEED_REINSTALL=1
        [ /app/pnpm-lock.yaml -nt \"$MODS\" ] && NEED_REINSTALL=1
        [ /app/package.json -nt \"$MODS\" ] && NEED_REINSTALL=1

        if [ \"$NEED_REINSTALL\" -eq 1 ]; then
          echo '[frontend] Installing dependencies...'
          pnpm install --frozen-lockfile || pnpm install
        fi

        # Ensure lucide-react is present for App.jsx imports
        node -e \"require.resolve('lucide-react')\" 2>/dev/null || pnpm add lucide-react

        exec su-exec ${UID:-1000}:${GID:-1000} pnpm run dev
      "
    ports:
      - "${HOST_FRONTEND_PORT:-5173}:5173"
    environment:
      - WATCHPACK_POLLING=true
    volumes:
      # Project source (hot reload)
      - ./frontend:/app
      # Make backend source visible to Vite at /app/backend (for full reload on backend changes)
      - ./backend:/app/backend
      # Use a named volume for node_modules (persists across down/up)
      - frontend_node_modules:/app/node_modules
      # Shared logs directory
      - ./logs:/logs

volumes:
  frontend_node_modules:
