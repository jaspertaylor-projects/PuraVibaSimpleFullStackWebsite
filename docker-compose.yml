# docker-compose.yml
# Purpose: Dev stack that persists logs and backend venv, publishes ephemeral host ports by default, and ensures logs/frontend-error.log & logs/backend-error.log are writable and visible to PuraViba.
# Imports From: backend/Dockerfile, frontend/Dockerfile
# Exported To: Docker daemon

services:
  log-perms:
    image: alpine:3.20
    user: "0:0"
    working_dir: /logs
    entrypoint: ["/bin/sh", "-c", "set -eu; mkdir -p /logs; chown -R ${UID:-1000}:${GID:-1000} /logs; chmod -R u+rwX,g+rwX /logs"]
    volumes:
      - ./logs:/logs

  venv-perms:
    image: alpine:3.20
    user: "0:0"
    entrypoint: ["/bin/sh", "-c", "set -eu; mkdir -p /venv; chown -R ${UID:-1000}:${GID:-1000} /venv; chmod -R u+rwX,g+rwX /venv"]
    volumes:
      - ./backend/.venv:/venv

  backend:
    user: "${UID:-1000}:${GID:-1000}"
    build:
      context: ./backend
    environment:
      - LOG_DIR=/logs
      - UV_PYTHON_PREFER_SYSTEM=1
      - UV_PYTHON=python3.12
    depends_on:
      log-perms:
        condition: service_completed_successfully
      venv-perms:
        condition: service_completed_successfully
    ports:
      - target: 8000
        published: ${HOST_BACKEND_PORT:-0}
        protocol: tcp
    volumes:
      - ./backend/app:/app/app
      - ./backend/pyproject.toml:/app/pyproject.toml
      - ./backend/uv.lock:/app/uv.lock
      - ./backend/.venv:/app/.venv
      - ./logs:/logs
    command: >
      sh -c "
        set -ex
        uv venv --python python3.12
        uv sync --frozen || uv sync
        exec /app/.venv/bin/uvicorn app.bootstrap:asgi --host 0.0.0.0 --port 8000 --reload --loop asyncio
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://127.0.0.1:8000/api/hello"]
      interval: 5s
      timeout: 3s
      retries: 24
      start_period: 10s

  frontend:
    build:
      context: ./frontend
    depends_on:
      log-perms:
        condition: service_completed_successfully
      backend:
        condition: service_healthy
    environment:
      - LOG_DIR=/logs
      - WATCHPACK_POLLING=true
    command: >
      sh -lc "
        set -eu
        mkdir -p /app/node_modules
        chown -R ${UID:-1000}:${GID:-1000} /app/node_modules
        pnpm config set store-dir /pnpm/store --location project >/dev/null 2>&1 || true
        pnpm config set virtual-store-dir node_modules/.pnpm --location project >/dev/null 2>&1 || true
        MODS=/app/node_modules/.pnpm/.modules.yaml
        NEED_REINSTALL=0
        [ ! -d /app/node_modules/.pnpm ] && NEED_REINSTALL=1
        [ ! -f \"$MODS\" ] && NEED_REINSTALL=1
        [ /app/pnpm-lock.yaml -nt \"$MODS\" ] && NEED_REINSTALL=1
        [ /app/package.json -nt \"$MODS\" ] && NEED_REINSTALL=1
        if [ \"$NEED_REINSTALL\" -eq 1 ]; then pnpm install --frozen-lockfile || pnpm install; fi
        node -e \"require.resolve('lucide-react')\" 2>/dev/null || pnpm add lucide-react
        exec su-exec ${UID:-1000}:${GID:-1000} pnpm run dev
      "
    ports:
      - target: 5173
        published: ${HOST_FRONTEND_PORT:-0}
        protocol: tcp
    volumes:
      - ./frontend:/app
      - ./backend:/app/backend
      - frontend_node_modules:/app/node_modules
      - ./logs:/logs

volumes:
  frontend_node_modules:
